[
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Tổng quan về bài lab: Software-Defined Networking với AWS Bài lab này sẽ hướng dẫn bạn triển khai các khái niệm nền tảng của Software-Defined Networking (SDN) trong môi trường Amazon Web Services (AWS). Bạn sẽ có kinh nghiệm thực tế với việc điều khiển mạng bằng lập trình, định tuyến động và tự động hóa chính sách. Cốt lõi của dự án này là xây dựng một cơ chế failover tự động và mạnh mẽ cho các máy chủ web bằng cách sử dụng các dịch vụ của AWS. Cuối cùng, bạn sẽ hiểu cách một mặt phẳng điều khiển tập trung (AWS Lambda, CloudWatch) có thể quản lý động một mặt phẳng dữ liệu phân tán (EC2, VPC, EIP) để đảm bảo tính sẵn sàng cao và khả năng phục hồi của mạng.\nSơ đồ Kiến trúc Sơ đồ trên minh họa kiến trúc chúng ta sẽ triển khai:\nMặt phẳng dữ liệu (VPC, Subnets, EC2 Instances): Cơ sở hạ tầng mạng nền tảng nơi tất cả các tài nguyên của bạn cư trú. Nó bao gồm hai EC2 Instance (Web-Primary và Web-Backup) trong các public subnet riêng biệt để đảm bảo tính sẵn sàng cao. Internet Gateway \u0026amp; Elastic IP: Internet Gateway cung cấp kết nối Internet cho VPC, trong khi một Elastic IP duy nhất hoạt động như một điểm truy cập công cộng, tĩnh cho dịch vụ web của bạn. Mặt phẳng điều khiển (CloudWatch, EventBridge, Lambda): Đây là bộ não tự động của giải pháp SDN. CloudWatch Alarm chủ động giám sát tình trạng sức khỏe của Web-Primary instance. EventBridge Rule lắng nghe sự thay đổi trạng thái ALARM từ CloudWatch. Lambda Function được kích hoạt bởi EventBridge và thực thi một chính sách được xác định trước: liên kết lại Elastic IP từ Web-Primary bị lỗi sang Web-Backup khỏe mạnh. Phân tích Bài Lab: Bạn sẽ làm gì? Phần 2: Chuẩn bị: Thiết lập cơ sở hạ tầng mạng AWS nền tảng và quyền IAM. Phần 3: Triển khai Web Servers: Khởi chạy các EC2 instance chính và dự phòng, và cấu hình một Elastic IP. Phần 4: Tạo và cấu hình Lambda Function: Xây dựng logic mặt phẳng điều khiển serverless cho failover. Phần 5: Tạo Giám sát và Kích hoạt: Thiết lập cơ chế hướng sự kiện bằng cách sử dụng CloudWatch và EventBridge. Phần 6: Xác minh Định tuyến động: Kiểm tra quá trình failover tự động bằng cách mô phỏng lỗi máy chủ chính. Phần 7: Dọn dẹp tài nguyên: Xóa một cách có hệ thống tất cả các tài nguyên AWS đã tạo để tránh chi phí trong tương lai. Nội dung: Phần 2: Chuẩn bị Phần 3: Triển khai Web Servers Phần 4: Tạo và cấu hình Lambda Function Phần 5: Tạo Giám sát và Kích hoạt Phần 6: Xác minh Định tuyến động Phần 7: Dọn dẹp tài nguyên "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/3-deploy-web-servers/1-launch-web-primary-ec2/",
	"title": "Khởi chạy Web Primary EC2",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Triển khai EC2 Instance sẽ ban đầu đóng vai trò là máy chủ web chính.\nCác bước thực hiện Truy cập EC2 Dashboard: Điều hướng đến dịch vụ EC2 trong AWS Management Console.\nBắt đầu khởi chạy Instance: Chọn Instances từ bảng điều hướng bên trái, sau đó nhấn Launch instances.\nTên và thẻ (tags):\nName: Web-Primary Chọn Amazon Machine Image (AMI): Chọn \u0026ldquo;Amazon Linux 2023 AMI\u0026rdquo;\nChọn Instance Type: Chọn t2.micro hoặc t3.micro (đủ điều kiện cho AWS Free Tier).\nTạo Key Pair\nNhấn Create new key pair Key pair name: sdn-key Key pair type: Chọn RSA Private key file format: Chọn .pem Nhấn Create key pair Quan trọng: Tệp này chỉ được tải xuống một lần. Hãy lưu trữ nó ở nơi an toàn. Cấu hình chi tiết Instance:\nNetwork: Chọn sdn-project-vpc Subnet: Chọn sdn-public-subnet-1a Auto-assign Public IP: Đảm bảo Enable được chọn. Cấu hình Security Group:\nChọn một Security Group hiện có. Chọn web-server-sg đã tạo trước đó. Cấu hình User Data\nMở rộng Advanced Details và tìm mục User data. Dán script sau để cài đặt Nginx cho một máy chủ web đơn giản:\n#!/bin/bash sudo dnf update -y sudo dnf install nginx -y sudo systemctl start nginx sudo systemctl enable nginx echo \u0026#34;\u0026lt;h1\u0026gt;Hello from Web-Primary!\u0026lt;/h1\u0026gt;\u0026#34; | sudo tee /usr/share/nginx/html/index.html Khởi chạy Instance: Nhấn Launch instance.\nXác nhận và ghi lại: Ghi lại Instance ID của Web-Primary instance sau khi khởi chạy thành công.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/",
	"title": "Software-Defined Networking với AWS",
	"tags": [],
	"description": "",
	"content": "Software-Defined Networking với AWS Tổng quan Bài lab này là một hướng dẫn thực hành để triển khai các khái niệm Software-Defined Networking (SDN) trên Amazon Web Services (AWS). Bạn sẽ xây dựng một giải pháp tự động hóa mạng hoàn chỉnh, hướng sự kiện, thể hiện khả năng điều khiển bằng lập trình, định tuyến động và quản lý mạng dựa trên chính sách. Dự án này tập trung vào việc tạo ra một dịch vụ web có tính sẵn sàng cao với cơ chế failover tự động sử dụng AWS Lambda, CloudWatch và EventBridge để quản lý một Elastic IP. Điều này sẽ mang lại cho bạn sự hiểu biết thực tế về cách xây dựng các kiến trúc mạng có khả năng phục hồi và tự phục hồi trong đám mây.\nNội dung 1. Giới thiệu 2. Chuẩn bị 3. Triển khai Web Servers 4. Tạo và cấu hình Lambda Function 5. Tạo Giám sát và Kích hoạt 6. Xác minh Định tuyến động 7. Dọn dẹp tài nguyên "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/5-create-cloudwatch-alarm-and-eventbridge-rule/1-create-cloudwatch-alarm-for-web-primary/",
	"title": "Tạo CloudWatch Alarm cho Web Primary",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Thiết lập một alarm để giám sát trạng thái kiểm tra sức khỏe hệ thống của EC2 instance Web-Primary và kích hoạt cảnh báo nếu phát hiện lỗi.\nCác bước thực hiện Truy cập AWS Management Console: Đăng nhập vào tài khoản AWS của bạn.\nĐiều hướng đến dịch vụ CloudWatch: Trong thanh tìm kiếm, gõ \u0026ldquo;CloudWatch\u0026rdquo; và chọn dịch vụ CloudWatch.\nBắt đầu tạo alarm:\nChọn All alarms từ bảng điều hướng bên trái. Nhấn nút Create alarm. Chọn metric:\nNhấn Select metric. Chọn EC2 Metrics -\u0026gt; Per-Instance Metrics. Định vị và chọn metric StatusCheckFailed_System cho instance Web-Primary của bạn. Cấu hình metric và điều kiện:\nMetric đã chọn: StatusCheckFailed_System (đặt Statistic là Average, Period là 30 seconds). Conditions: Threshold type: Chọn Static. Whenever StatusCheckFailed_System is: Chọn Greater/Equal. than: Nhập 1. Additional configuration: Missing data treatment: Chọn Treat missing data as bad. Cấu hình actions:\nNhấn Next. Alarm state trigger: Đảm bảo In ALARM được chọn. Select an SNS topic: Chọn Create new topic. Topic name: Nhập SDN_Failover_Notifications. Thêm địa chỉ email của bạn để nhận thông báo trực tiếp. Nhấn Create topic. Cấu hình tên và mô tả:\nNhấn Next. Alarm name: Nhập Web-Primary-System-Check-Failed. Alarm description: Triggers when Web-Primary instance fails system checks. Nhấn Next. Hoàn tất việc tạo alarm: Nhấn nút Create alarm.\nKiểm tra email của bạn và xác nhận đăng ký.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/4-create-and-configure-lambda-function/1-create-lambda-function/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Tạo hàm AWS Lambda sẽ thực thi logic SDN, cụ thể là quản lý việc failover EIP.\nCác bước thực hiện Truy cập AWS Management Console: Đăng nhập vào tài khoản AWS của bạn.\nĐiều hướng đến dịch vụ Lambda: Trong thanh tìm kiếm, gõ \u0026ldquo;Lambda\u0026rdquo; và chọn dịch vụ Lambda.\nBắt đầu tạo hàm:\nChọn Functions từ bảng điều hướng bên trái. Nhấn nút Create function. Cấu hình các cài đặt cơ bản cho hàm:\nAuthor from scratch: Chọn tùy chọn này. Function name: SDNEIPFailoverFunction Runtime: Chọn Python 3.9 Architecture: Chọn x86_64. Permissions: Dưới \u0026ldquo;Change default execution role\u0026rdquo;, chọn Use an existing role. Chọn SDNLambdaRole đã tạo trước đó từ danh sách thả xuống. Hoàn tất việc tạo hàm: Nhấn nút Create function.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/1-create-vpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Thiết lập một môi trường mạng ảo cô lập và bảo mật trong AWS, nơi sẽ chứa tất cả các tài nguyên của dự án.\nCác bước thực hiện Truy cập AWS Management Console: Đăng nhập vào tài khoản AWS của bạn.\nĐiều hướng đến dịch vụ VPC: Trong thanh tìm kiếm, gõ \u0026ldquo;VPC\u0026rdquo; và chọn dịch vụ VPC.\nBắt đầu tạo VPC:\nChọn Your VPCs từ bảng điều hướng bên trái. Nhấn vào nút Create VPC. Cấu hình các tham số VPC:\nName tag: Nhập sdn-project-vpc IPv4 CIDR block: Nhập 10.0.0.0/16 Tenancy: Giữ cài đặt mặc định là Default. Hoàn tất việc tạo VPC: Nhấn nút Create VPC.\nXác nhận và ghi lại: Một thông báo thành công xác nhận VPC đã được tạo sẽ hiển thị. Ghi lại VPC ID để cấu hình cho các bước tiếp theo.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/6-verify-dynamic-routing-and-policy-automation/1-initial-verification/",
	"title": "Xác minh ban đầu",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Xác minh rằng dịch vụ web có thể truy cập ban đầu qua Elastic IP và đang phục vụ đúng nội dung từ máy chủ web chính.\nCác bước thực hiện Truy xuất địa chỉ Elastic IP: Lấy địa chỉ Elastic IP đã ghi lại trong Phần 3.3.\nTruy cập dịch vụ Web: Mở một trình duyệt web.\nĐiều hướng đến EIP: Nhập địa chỉ Elastic IP kèm cổng 80 vào thanh địa chỉ của trình duyệt và nhấn Enter.\nXác nhận phản hồi từ máy chủ chính: Trình duyệt sẽ hiển thị nội dung \u0026ldquo;Hello from Web-Primary!\u0026rdquo;, xác nhận máy chủ chính đang hoạt động và có thể truy cập qua EIP.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/4-create-and-configure-lambda-function/2-configure-lambda-environment-variables/",
	"title": "Cấu hình Biến Môi trường Lambda",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Cung cấp cho hàm Lambda những thông tin cần thiết, bao gồm Allocation ID của Elastic IP và Instance ID của cả máy chủ web chính và máy chủ dự phòng, để nó có thể thực hiện các thao tác failover.\nCác bước thực hiện Truy cập cấu hình hàm Lambda: Sau khi SDNEIPFailoverFunction được tạo, chọn tab Configuration.\nChỉnh sửa biến môi trường:\nChọn Environment variables từ menu bên trái. Nhấn nút Edit. Thêm các biến bắt buộc:\nNhấn Add environment variable. Key: EIP_ALLOCATION_ID Value: Nhập Allocation ID của Elastic IP đã ghi lại trong Phần 3.3. Nhấn Add environment variable. Key: WEB_BACKUP_INSTANCE_ID Value: Nhập Instance ID của EC2 instance Web-Backup đã ghi lại trong Phần 3.2. Nhấn Add environment variable. Key: WEB_PRIMARY_INSTANCE_ID Value: Nhập Instance ID của EC2 instance Web-Primary đã ghi lại trong Phần 3.1. Lưu thay đổi: Nhấn nút Save.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/3-deploy-web-servers/2-launch-web-backup-ec2/",
	"title": "Khởi chạy Web Backup EC2",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Triển khai EC2 Instance sẽ đóng vai trò là dịch vụ web dự phòng, sẵn sàng cho việc failover.\nCác bước thực hiện Truy cập EC2 Dashboard: Điều hướng đến dịch vụ EC2.\nBắt đầu khởi chạy Instance: Chọn Instances, sau đó nhấn Launch instances.\nTên và thẻ (tags)\nName: Web-Backup Chọn Amazon Machine Image (AMI): Chọn cùng AMI đã dùng cho instance chính.\nChọn Instance Type: Chọn t2.micro hoặc t3.micro.\nChọn Key Pair: Chọn cùng key pair đã dùng cho instance chính.\nCấu hình chi tiết Instance:\nNetwork: Chọn sdn-project-vpc. Subnet: Chọn sdn-public-subnet-1b (triển khai trong một AZ khác để tăng cường tính sẵn sàng). Auto-assign Public IP: Đảm bảo Enable được chọn. Cấu hình Security Group:\nChọn một Security Group hiện có. Chọn web-server-sg. Cấu hình User Data\nMở rộng Advanced Details và tìm mục User data. Dán script sau:\n#!/bin/bash sudo dnf update -y sudo dnf install nginx -y sudo systemctl start nginx sudo systemctl enable nginx echo \u0026#34;\u0026lt;h1\u0026gt;Hello from Web-Backup!\u0026lt;/h1\u0026gt;\u0026#34; | sudo tee /usr/share/nginx/html/index.html Khởi chạy Instance: Nhấn Launch instance.\nXác nhận và ghi lại: Ghi lại Instance ID của Web-Backup instance sau khi khởi chạy thành công.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/6-verify-dynamic-routing-and-policy-automation/2-simulate-web-primary-failure/",
	"title": "Mô phỏng lỗi máy chủ Web Primary",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Cố ý gây ra lỗi trên EC2 instance Web-Primary, từ đó kích hoạt CloudWatch Alarm và sau đó là quá trình failover được điều khiển bởi SDN.\nCác bước thực hiện Truy cập EC2 Dashboard: Điều hướng đến dịch vụ EC2 trong AWS Management Console.\nChọn Instance chính: Từ danh sách \u0026ldquo;Instances\u0026rdquo;, chọn EC2 instance Web-Primary của bạn.\nDừng Instance:\nChọn Instance state. Chọn Stop instance. Xác nhận hành động khi được hỏi. Giám sát trạng thái Alarm: Chờ vài phút để CloudWatch phát hiện sự thay đổi trạng thái của instance. Giám sát alarm Web-Primary-System-Check-Failed trong bảng điều khiển CloudWatch Alarms. Trạng thái của alarm được mong đợi sẽ chuyển từ OK sang INSUFFICIENT_DATA và sau đó sang ALARM.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Tổng quan về phần Chuẩn bị Phần này của bài lab tập trung vào việc thiết lập cơ sở hạ tầng AWS nền tảng cần thiết cho dự án Software-Defined Networking (SDN). Bạn sẽ triển khai và cấu hình các thành phần mạng cốt lõi tạo thành Data Plane (mặt phẳng dữ liệu) của kiến trúc SDN. Điều này bao gồm việc tạo một môi trường mạng an toàn và cô lập (VPC), định nghĩa các phân đoạn mạng (Subnets), thiết lập kết nối (Internet Gateway, Route Tables) và các quy tắc bảo mật (Security Groups). Ngoài ra, bạn cũng sẽ tạo các IAM Policies và Roles cần thiết để cấp quyền truy cập lập trình cho thành phần điều khiển (control plane) trong tương lai, là hàm AWS Lambda.\nCác khái niệm chính Amazon VPC (Virtual Private Cloud): Một mạng ảo được cô lập về mặt logic, nơi bạn có thể khởi chạy các tài nguyên AWS. Subnet: Một dải địa chỉ IP trong VPC của bạn. Các tài nguyên trong Public Subnet có thể giao tiếp với Internet, trong khi các tài nguyên trong Private Subnet thì không. Internet Gateway (IGW): Một thành phần VPC được mở rộng theo chiều ngang, dự phòng và có tính sẵn sàng cao, cho phép giao tiếp giữa VPC của bạn và Internet. Route Table: Một tập hợp các quy tắc, gọi là các tuyến (routes), xác định nơi lưu lượng mạng từ các Subnet của bạn được định hướng. Security Group: Một tường lửa ảo kiểm soát lưu lượng ra và vào cho các EC2 Instance. IAM (Identity and Access Management): Một dịch vụ cho phép bạn quản lý quyền truy cập vào các dịch vụ và tài nguyên AWS một cách an toàn. IAM Policies định nghĩa các quyền hạn, và IAM Roles cấp các quyền đó cho các dịch vụ hoặc người dùng AWS. Nội dung: 2.1-Create-VPC 2.2-Create-Subnets 2.3-Create-Internet-Gateway 2.4-Create-Route-Table 2.5-Create-Security-Groups 2.6-Create-IAM-Policy-and-IAM-Role "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/5-create-cloudwatch-alarm-and-eventbridge-rule/2-create-eventbridge-rule-to-trigger-lambda/",
	"title": "Tạo EventBridge Rule để kích hoạt Lambda",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Liên kết CloudWatch Alarm Web-Primary-System-Check-Failed với hàm Lambda SDNEIPFailoverFunction, đảm bảo logic failover được tự động thực thi khi alarm được kích hoạt.\nCác bước thực hiện Truy cập AWS Management Console: Đăng nhập vào tài khoản AWS của bạn.\nĐiều hướng đến dịch vụ EventBridge: Trong thanh tìm kiếm, gõ \u0026ldquo;EventBridge\u0026rdquo; và chọn dịch vụ EventBridge.\nBắt đầu tạo rule:\nChọn Rules từ bảng điều hướng bên trái. Nhấn nút Create rule. Cấu hình chi tiết rule:\nName: SDN-Failover-Rule Description: Kích hoạt hàm Lambda khi alarm của Web-Primary. Event bus: Chọn default. Rule type: Chọn Rule with an event pattern. Nhấn Next. Cấu hình mẫu sự kiện:\nCreation method: Chọn Custom pattern (JSON editor).\nChỉnh sửa JSON mẫu sự kiện: Trong vùng văn bản \u0026ldquo;Event pattern\u0026rdquo;, chèn đoạn JSON sau:\n{ \u0026#34;source\u0026#34;: [\u0026#34;aws.cloudwatch\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;CloudWatch Alarm State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;alarmName\u0026#34;: [\u0026#34;Web-Primary-System-Check-Failed\u0026#34;], \u0026#34;state\u0026#34;: { \u0026#34;value\u0026#34;: [\u0026#34;ALARM\u0026#34;] } } } Nhấn Next.\nCấu hình target:\nTarget types: Chọn AWS service. Select a target: Chọn Lambda function. Function: Chọn SDNEIPFailoverFunction (hàm Lambda của bạn). Nhấn Next. Xem lại và tạo:\nXem lại cấu hình rule. Nhấn Create rule. Xác nhận: Rule SDN-Failover-Rule mới sẽ xuất hiện trong danh sách EventBridge Rules, cho thấy nó đã được cấu hình để kích hoạt hàm Lambda dựa trên CloudWatch alarm.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/2-create-subnets/",
	"title": "Tạo Subnets",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Phân chia không gian địa chỉ IP của VPC thành các phân đoạn nhỏ hơn (Subnet) để sắp xếp tài nguyên và tăng cường kiểm soát lưu lượng. Hai Subnet công cộng sẽ được tạo trong các Availability Zone (AZ) riêng biệt để cải thiện tính sẵn sàng cao.\nCác bước thực hiện Điều hướng đến Subnets: Từ VPC Dashboard, chọn Subnets trong bảng điều hướng bên trái.\nBắt đầu tạo Subnet: Nhấn nút Create subnet.\nCấu hình Subnet đầu tiên (Public Subnet 1):\nVPC ID: Chọn sdn-project-vpc Subnet name: Nhập sdn-public-subnet-1a Availability Zone: Chọn us-east-1a IPv4 CIDR block: Nhập 10.0.1.0/24 Hoàn tất tạo Subnet 1: Nhấn nút Create subnet.\nCấu hình Subnet thứ hai (Public Subnet 2): Lặp lại các bước 3 và 4 cho một Subnet thứ hai:\nVPC ID: Chọn sdn-project-vpc Subnet name: Nhập sdn-public-subnet-1b Availability Zone: Chọn us-east-1b IPv4 CIDR block: Nhập 10.0.2.0/24 Hoàn tất tạo Subnet 2: Nhấn nút Create subnet.\nBật tự động gán IP công cộng cho các Public Subnet:\nChọn sdn-public-subnet-1a. Chọn Actions -\u0026gt; Modify auto-assign IP settings. Chọn hộp kiểm Enable auto-assign public IPv4 address. Nhấn Save. Thực hiện các bước tương tự cho sdn-public-subnet-1b Xác nhận và ghi lại: Hai Subnet mới sẽ xuất hiện trong danh sách. Ghi lại Subnet IDs của cả hai Subnet.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/3-deploy-web-servers/3-allocate-elastic-ip-and-associate/",
	"title": "Cấp phát và Liên kết Elastic IP",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Cấp phát một địa chỉ IP công cộng tĩnh (Elastic IP) sẽ đóng vai trò là điểm truy cập ổn định cho các yêu cầu của client, và ban đầu liên kết nó với máy chủ web chính.\nCác bước thực hiện Truy cập Elastic IPs: Trong EC2 Dashboard, chọn Elastic IPs từ bảng điều hướng bên trái, dưới mục \u0026ldquo;Network \u0026amp; Security\u0026rdquo;.\nCấp phát địa chỉ Elastic IP: Nhấn nút Allocate Elastic IP address.\nXác nhận cấp phát: Nhấn Allocate. Ghi lại Allocation ID của EIP vừa được cấp phát.\nLiên kết Elastic IP với instance chính:\nChọn EIP vừa được cấp phát. Chọn Actions -\u0026gt; Associate Elastic IP address. Resource type: Chọn Instance. Instance: Chọn Web-Primary (sử dụng Instance ID của nó). Reassociation: Chọn Allow this Elastic IP address to be reassociated. Nhấn Associate. Xác nhận và ghi lại: Elastic IP hiện đã được liên kết với máy chủ web chính của bạn. Ghi lại địa chỉ Elastic IP đó. Địa chỉ IP này sẽ được sử dụng để kiểm tra dịch vụ web.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/4-create-and-configure-lambda-function/3-upload-lambda-code/",
	"title": "Tải lên Code Lambda",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Cung cấp code Python có thể thực thi cho hàm Lambda, định nghĩa logic để phát hiện lỗi máy chủ chính và điều phối việc gán lại Elastic IP cho máy chủ dự phòng.\nCác bước thực hiện Truy cập trình soạn thảo code của hàm Lambda: Trong cấu hình của SDNEIPFailoverFunction, chọn tab Code.\nThay thế code mặc định: Xóa bất kỳ code mặc định nào có sẵn trong cửa sổ soạn thảo lambda_function.py.\nDán code được cung cấp: Chèn code Python sau vào trình soạn thảo lambda_function.py:\nimport boto3 import os import json # Import json library to parse JSON strings # Initialize the EC2 client ec2_client = boto3.client(\u0026#39;ec2\u0026#39;) # Retrieve Environment Variables for EIP and Instance IDs EIP_ALLOCATION_ID = os.environ.get(\u0026#39;EIP_ALLOCATION_ID\u0026#39;) WEB_BACKUP_INSTANCE_ID = os.environ.get(\u0026#39;WEB_BACKUP_INSTANCE_ID\u0026#39;) WEB_PRIMARY_INSTANCE_ID = os.environ.get(\u0026#39;WEB_PRIMARY_INSTANCE_ID\u0026#39;) def lambda_handler(event, context): print(\u0026#34;--- Full Event Received ---\u0026#34;) print(event) # Print the entire event object to logs for debugging its structure print(\u0026#34;-------------------------\u0026#34;) instance_id_in_alarm = None state_value = None # Safely extract the alarm state value if \u0026#39;detail\u0026#39; in event and \u0026#39;state\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;value\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;]: state_value = event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;value\u0026#39;] # --- Start of robust InstanceId extraction --- # Try to find InstanceId from \u0026#39;configuration.metrics\u0026#39; directly try: if \u0026#39;detail\u0026#39; in event and \u0026#39;configuration\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;metrics\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;configuration\u0026#39;]: for metric_config in event[\u0026#39;detail\u0026#39;][\u0026#39;configuration\u0026#39;][\u0026#39;metrics\u0026#39;]: if \u0026#39;metricStat\u0026#39; in metric_config and \u0026#39;metric\u0026#39; in metric_config[\u0026#39;metricStat\u0026#39;] and \u0026#39;dimensions\u0026#39; in metric_config[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;]: dimensions_dict = metric_config[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;][\u0026#39;dimensions\u0026#39;] if isinstance(dimensions_dict, dict) and \u0026#39;InstanceId\u0026#39; in dimensions_dict: instance_id_in_alarm = dimensions_dict[\u0026#39;InstanceId\u0026#39;] break # Found, exit this loop except Exception as e: print(f\u0026#34;Error parsing Instance ID from configuration.metrics: {e}\u0026#34;) # Fallback: If InstanceId not found, try parsing \u0026#39;reasonData\u0026#39;. if not instance_id_in_alarm and \u0026#39;detail\u0026#39; in event and \u0026#39;state\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;reasonData\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;]: try: reason_data_str = event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;reasonData\u0026#39;] reason_data_json = json.loads(reason_data_str) # Parse the JSON string if \u0026#39;metrics\u0026#39; in reason_data_json and len(reason_data_json[\u0026#39;metrics\u0026#39;]) \u0026gt; 0: first_metric = reason_data_json[\u0026#39;metrics\u0026#39;][0] if \u0026#39;metricStat\u0026#39; in first_metric and \u0026#39;metric\u0026#39; in first_metric[\u0026#39;metricStat\u0026#39;] and \u0026#39;dimensions\u0026#39; in first_metric[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;]: dimensions_dict_reason = first_metric[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;][\u0026#39;dimensions\u0026#39;] if isinstance(dimensions_dict_reason, dict) and \u0026#39;InstanceId\u0026#39; in dimensions_dict_reason: instance_id_in_alarm = dimensions_dict_reason[\u0026#39;InstanceId\u0026#39;] except Exception as e: print(f\u0026#34;Error parsing Instance ID from reasonData: {e}\u0026#34;) # --- End of robust InstanceId extraction --- # If InstanceId was still not found after all attempts, log and exit if not instance_id_in_alarm: print(\u0026#34;Could not find \u0026#39;InstanceId\u0026#39; in alarm details after all parsing attempts. Exiting.\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;body\u0026#39;: \u0026#39;InstanceId not found in alarm event.\u0026#39; } # Check if the alarm is for the primary web server and is in ALARM state if instance_id_in_alarm == WEB_PRIMARY_INSTANCE_ID and state_value == \u0026#39;ALARM\u0026#39;: print(f\u0026#34;Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) is in ALARM state. Initiating failover.\u0026#34;) try: # Describe the EIP to check its current association response = ec2_client.describe_addresses( AllocationIds=[EIP_ALLOCATION_ID] ) current_association_id = None current_associated_instance_id = None if response[\u0026#39;Addresses\u0026#39;] and \u0026#39;AssociationId\u0026#39; in response[\u0026#39;Addresses\u0026#39;][0]: current_association_id = response[\u0026#39;Addresses\u0026#39;][0][\u0026#39;AssociationId\u0026#39;] print(f\u0026#34;Current EIP association ID: {current_association_id}\u0026#34;) if \u0026#39;InstanceId\u0026#39; in response[\u0026#39;Addresses\u0026#39;][0]: current_associated_instance_id = response[\u0026#39;Addresses\u0026#39;][0][\u0026#39;InstanceId\u0026#39;] print(f\u0026#34;EIP is currently associated with instance: {current_associated_instance_id}\u0026#34;) # If EIP is associated with Web-Primary, disassociate it if current_associated_instance_id == WEB_PRIMARY_INSTANCE_ID: print(f\u0026#34;EIP is currently associated with Web-Primary. Disassociating...\u0026#34;) ec2_client.disassociate_address(AssociationId=current_association_id) print(\u0026#34;Disassociated EIP.\u0026#34;) else: print(f\u0026#34;EIP is not currently associated with Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) or not associated. Current: {current_associated_instance_id}. Proceeding to associate with backup.\u0026#34;) # Associate the EIP with Web-Backup ec2_client.associate_address( InstanceId=WEB_BACKUP_INSTANCE_ID, AllocationId=EIP_ALLOCATION_ID ) print(f\u0026#34;EIP {EIP_ALLOCATION_ID} successfully associated with Web-Backup ({WEB_BACKUP_INSTANCE_ID}).\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Failover completed successfully.\u0026#39; } except Exception as e: print(f\u0026#34;Error during failover: {e}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: f\u0026#39;Failover failed: {e}\u0026#39; } else: # Log if the alarm is not for the primary instance or not in ALARM state print(f\u0026#34;Alarm not for Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) or not in ALARM state ({state_value}). No action taken.\u0026#34;) print(f\u0026#34;Instance ID from alarm: {instance_id_in_alarm}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;No relevant action performed.\u0026#39; } Deploy code: Nhấn nút Deploy để lưu và triển khai các thay đổi cho hàm Lambda của bạn.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/3-create-internet-gateway/",
	"title": "Tạo Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Cho phép các tài nguyên trong Public Subnet của VPC giao tiếp với Internet.\nCác bước thực hiện Điều hướng đến Internet Gateways: Trong VPC Dashboard, chọn Internet Gateways từ bảng điều hướng bên trái.\nBắt đầu tạo Internet Gateway: Nhấn nút Create internet gateway.\nCấu hình Internet Gateway:\nName tag: Nhập sdn-project-igw Hoàn tất tạo Internet Gateway: Nhấn nút Create internet gateway.\nGắn Internet Gateway vào VPC:\nSau khi IGW được tạo (nó sẽ ở trạng thái Detached), chọn IGW vừa tạo. Chọn Actions -\u0026gt; Attach to VPC. Chọn sdn-project-vpc từ danh sách thả xuống. Nhấn nút Attach internet gateway. Xác nhận việc gắn vào: State của Internet Gateway sẽ chuyển thành Attached.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/3-deploy-web-servers/",
	"title": "Triển khai Web Servers",
	"tags": [],
	"description": "",
	"content": "Tổng quan về phần Triển khai Web Servers Phần này của bài lab tập trung vào việc triển khai các thành phần cốt lõi của dịch vụ web, tạo thành Data Plane (mặt phẳng dữ liệu) của giải pháp SDN. Bạn sẽ khởi chạy hai EC2 Instance: một đóng vai trò là máy chủ web chính và một làm máy chủ dự phòng. Để cung cấp một điểm truy cập ổn định và nhất quán cho lưu lượng truy cập của client, bạn cũng sẽ cấp phát một Elastic IP (EIP) và liên kết nó với máy chủ chính. EIP này là tài nguyên mà mặt phẳng điều khiển SDN của chúng ta sẽ quản lý bằng lập trình để đạt được định tuyến động và failover.\nCác khái niệm chính Amazon EC2 (Elastic Compute Cloud): Một dịch vụ web cung cấp dung lượng tính toán an toàn, có thể thay đổi kích thước trong đám mây. Đây là dịch vụ cốt lõi để chạy các máy chủ ảo, hay còn gọi là instance. EC2 User Data: Một script mà bạn có thể cung cấp cho một EC2 Instance để thực hiện các tác vụ tự động khi nó khởi động lần đầu, chẳng hạn như cài đặt một máy chủ web hoặc cấu hình phần mềm. Elastic IP (EIP): Một địa chỉ IPv4 công cộng, tĩnh, được thiết kế cho điện toán đám mây động. Một EIP có thể được liên kết với bất kỳ EC2 Instance nào trong tài khoản của bạn, và mặt phẳng điều khiển của chúng ta sẽ sử dụng khả năng này để chuyển hướng lưu lượng truy cập trong quá trình failover. Failover: Quá trình chuyển đổi sang một máy chủ, hệ thống hoặc mạng dự phòng khi ứng dụng, máy chủ hoặc hệ thống đang hoạt động bị lỗi hoặc kết thúc bất thường. Nội dung: 3.1-Launch-Web-Primary-EC2 3.2-Launch-Web-Backup-EC2 3.3-Allocate-Elastic-IP-and-Associate "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/6-verify-dynamic-routing-and-policy-automation/3-verify-failover-and-dynamic-routing/",
	"title": "Xác minh Failover và Định tuyến động",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Xác nhận rằng Elastic IP đã được hủy liên kết thành công khỏi máy chủ chính bị lỗi và được liên kết lại với máy chủ dự phòng, cho thấy định tuyến động và tự động hóa chính sách đã thành công.\nCác bước thực hiện Xác minh Liên kết Elastic IP:\nĐiều hướng trở lại dịch vụ EC2. Chọn Elastic IPs từ bảng điều hướng bên trái. Kiểm tra chi tiết của Elastic IP của bạn. Xác nhận rằng liên kết của nó đã thay đổi và nó hiện được liên kết với EC2 instance Web-Backup. Truy cập dịch vụ Web qua EIP (Lần thử thứ hai)\nTải lại trình duyệt web của bạn. Xác nhận Phản hồi từ máy chủ dự phòng: Trình duyệt bây giờ sẽ hiển thị nội dung \u0026ldquo;Hello from Web-Backup!\u0026rdquo;. Điều này chứng minh rằng lưu lượng truy cập đã được chuyển hướng động đến máy chủ dự phòng khỏe mạnh bởi mặt phẳng điều khiển SDN. "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/4-create-route-table/",
	"title": "Tạo Route Table",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Định nghĩa cách các gói mạng được định tuyến trong và ngoài Subnet của bạn. Một Route Table sẽ được cấu hình để định tuyến lưu lượng truy cập Internet thông qua Internet Gateway.\nCác bước thực hiện Truy cập Route Tables: Trong VPC Dashboard, chọn Route Tables từ bảng điều hướng bên trái.\nXác định Route Table đích: Một Route Table mặc định được tự động tạo và liên kết với VPC khi khởi tạo. Route Table này sẽ được sử dụng. Định vị Route Table có VPC ID khớp với sdn-project-vpc và giá trị cột Main là Yes.\nThêm tuyến đường Internet mặc định:\nChọn Route Table đã xác định.\nChọn tab Routes.\nNhấn nút Edit routes.\nNhấn Add route.\nDestination: Nhập 0.0.0.0/0 (đại diện cho tất cả lưu lượng truy cập Internet IPv4).\nTarget: Chọn Internet Gateway từ danh sách thả xuống, sau đó chọn sdn-project-igw (IGW đã tạo của bạn).\nNhấn nút Save changes.\nLiên kết Subnet với Route Table:\nChọn tab Subnet associations.\nNhấn nút Edit subnet associations.\nChọn cả hai Subnet: sdn-public-subnet-1a và sdn-public-subnet-1b.\nNhấn nút Save associations.\nXác nhận liên kết: Xác minh rằng cả hai Public Subnet hiện đã được liên kết với Route Table được cấu hình cho truy cập Internet.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/4-create-and-configure-lambda-function/",
	"title": "Tạo và cấu hình Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tổng quan về phần Tạo và cấu hình Lambda Function Phần này của bài lab dành riêng cho việc xây dựng Control Plane (mặt phẳng điều khiển) của giải pháp Software-Defined Networking (SDN). Bạn sẽ tạo và cấu hình một hàm serverless AWS Lambda, đóng vai trò là logic cốt lõi cho chính sách định tuyến động của chúng ta. Hàm này sẽ được trang bị các quyền cần thiết (thông qua một IAM Role) và các biến môi trường (cho EIP và các Instance ID) để tương tác với EC2 API. Vai trò chính của hàm này là quản lý việc liên kết Elastic IP bằng lập trình, đảm bảo rằng khi máy chủ chính gặp sự cố, lưu lượng truy cập sẽ được chuyển hướng một cách liền mạch sang máy chủ dự phòng.\nCác khái niệm chính AWS Lambda: Một dịch vụ tính toán serverless, hướng sự kiện, cho phép bạn chạy code cho hầu hết mọi loại ứng dụng hoặc dịch vụ backend mà không cần cung cấp hoặc quản lý máy chủ. Đây là công cụ lý tưởng để xây dựng mặt phẳng điều khiển của SDN, vì nó có thể được kích hoạt bởi các sự kiện mạng. Serverless Computing: Một mô hình thực thi điện toán đám mây, trong đó nhà cung cấp đám mây quản lý máy chủ, cho phép các nhà phát triển chỉ tập trung vào code của họ. Programmatic Network Control (Điều khiển mạng bằng lập trình): Khả năng quản lý và cấu hình các tài nguyên mạng (như EIP và định tuyến) bằng cách sử dụng code và API, thay vì cấu hình thủ công. Đây là một nguyên tắc cốt lõi của SDN. Environment Variables (Biến môi trường): Các cặp khóa-giá trị mà bạn có thể lưu trữ trong cấu hình của hàm Lambda để truyền các cài đặt một cách động, chẳng hạn như ID tài nguyên, mà không cần thay đổi code. Nội dung: 4.1-Create-Lambda-Function 4.2-Configure-Lambda-Environment-Variables 4.3-Upload-Lambda-Code "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/5-create-cloudwatch-alarm-and-eventbridge-rule/",
	"title": "Tạo CloudWatch Alarm và EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "Tổng quan về phần Tạo CloudWatch Alarm và EventBridge Rule Phần này của bài lab là bước cuối cùng để kết nối mặt phẳng điều khiển và mặt phẳng dữ liệu của giải pháp SDN. Bạn sẽ thiết lập cơ chế hướng sự kiện (event-driven) để khởi động quá trình failover. Điều này bao gồm việc tạo một CloudWatch Alarm để chủ động giám sát tình trạng sức khỏe của máy chủ web chính. Nếu alarm này được kích hoạt (ví dụ: do một lỗi kiểm tra hệ thống), nó sẽ phát ra một sự kiện. Bạn sẽ sau đó sử dụng Amazon EventBridge để bắt sự kiện cụ thể này và kích hoạt hàm AWS Lambda của chúng ta. Điều này hoàn thành vòng lặp của SDN: một thay đổi trong trạng thái mạng (máy chủ bị lỗi) được phát hiện, điều này kích hoạt logic của mặt phẳng điều khiển (Lambda), sau đó thực thi một thay đổi trong cấu hình mạng (liên kết lại EIP).\nCác khái niệm chính Amazon CloudWatch: Một dịch vụ giám sát và quản lý cung cấp dữ liệu và thông tin chi tiết có thể hành động cho các ứng dụng và tài nguyên cơ sở hạ tầng của AWS, hybrid và on-premises. Nó thu thập dữ liệu giám sát và hoạt động dưới dạng logs, metrics và events. CloudWatch Alarm: Một alarm giám sát một metric duy nhất hoặc kết quả của một biểu thức toán học dựa trên một metric. Alarm sẽ thực hiện một hoặc nhiều hành động dựa trên giá trị của metric so với một ngưỡng trong một số khoảng thời gian. Amazon EventBridge: Một event bus serverless giúp dễ dàng kết nối các ứng dụng bằng cách sử dụng dữ liệu từ các ứng dụng của riêng bạn, các ứng dụng SaaS đã tích hợp và các dịch vụ AWS. Các EventBridge rules sẽ khớp với các sự kiện đến và định tuyến chúng đến các đích (target) như một hàm Lambda. Event-Driven Architecture (Kiến trúc hướng sự kiện): Một mẫu thiết kế phần mềm, trong đó các ứng dụng và dịch vụ không phụ thuộc vào nhau giao tiếp thông qua các sự kiện. Trong bài lab này, sự kiện của CloudWatch là yếu tố kích hoạt hàm Lambda của chúng ta. Nội dung: 5.1-Create-CloudWatch-Alarm-for-Web-Primary 5.2-Create-EventBridge-Rule-to-Trigger-Lambda "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/5-create-security-groups/",
	"title": "Tạo Security Groups",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Triển khai một Security Group nhằm kiểm soát lưu lượng mạng vào và ra khỏi các EC2 Instance (máy chủ web), chỉ cho phép các cổng giao tiếp cần thiết (HTTP, HTTPS, SSH).\nCác bước thực hiện Điều hướng đến Security Groups:\nTrong AWS Management Console, truy cập dịch vụ EC2. Trong bảng điều hướng bên trái, dưới mục \u0026ldquo;Network \u0026amp; Security\u0026rdquo;, chọn Security Groups. Khởi tạo Security Group: Nhấn nút Create security group.\nCấu hình thông tin cơ bản:\nSecurity group name: web-server-sg Description: Cho phép lưu lượng HTTP/HTTPS và SSH đến các máy chủ web VPC: Chọn sdn-project-vpc Cấu hình Inbound rules (Lưu lượng vào):\nNhấn Add rule.\nType: HTTP (Cổng: 80) Source: Anywhere-IPv4 (0.0.0.0/0) Nhấn Add rule.\nType: HTTPS (Cổng: 443) Source: Anywhere-IPv4 (0.0.0.0/0). Nhấn Add rule.\nType: SSH (Cổng: 22) Source: Chọn My IP để tự động điền địa chỉ IP công cộng hiện tại của bạn. Việc mở quyền truy cập SSH từ 0.0.0.0/0 không được khuyến nghị từ góc độ bảo mật. Cấu hình Outbound rules (Lưu lượng ra): Giữ cài đặt mặc định là All traffic đến 0.0.0.0/0; điều này là đủ cho phạm vi của bài lab này.\nHoàn tất tạo Security Group: Nhấn nút Create security group.\nXác nhận: Security Group web-server-sg mới sẽ xuất hiện trong danh sách.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/2-preparation/6-create-iam-policy-and-iam-role/",
	"title": "Tạo IAM Policy và IAM Role",
	"tags": [],
	"description": "",
	"content": "Mục tiêu: Định nghĩa và gán các quyền cần thiết cho AWS Lambda (mặt phẳng điều khiển của chúng ta) để thực hiện các hành động như đọc thông tin EC2 Instance, quản lý Elastic IP (liên kết/hủy liên kết), và ghi nhật ký vào CloudWatch Logs.\nCác bước thực hiện Điều hướng đến dịch vụ IAM: Trong thanh tìm kiếm của AWS Console, gõ \u0026ldquo;IAM\u0026rdquo; và chọn dịch vụ IAM.\nTạo IAM Policy (Chính sách quyền hạn):\nTrong bảng điều hướng bên trái, chọn Policies.\nNhấn nút Create policy.\nChọn tab JSON.\nXóa nội dung mặc định và dán đoạn JSON policy sau:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeInstances\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DescribeAddresses\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; } ] } Nhấn Next Name: SDNLambdaEIPControlPolicy Description: Allows Lambda to control EC2 EIP associations and write logs. Nhấn nút Create policy. Tạo IAM Role:\nTrong bảng điều hướng bên trái, chọn Roles. Nhấn nút Create role. Select trusted entity: Chọn AWS service. Use case: Chọn Lambda. Nhấn Next. Add permissions: Trong trường tìm kiếm, gõ tên Policy vừa tạo (SDNLambdaEIPControlPolicy) và chọn nó. Nhấn Next. Name, review, and create:\nRole name: SDNLambdaRole Description: Role for Lambda function to manage EIP for SDN failover. Nhấn nút Create role.\nXác nhận: Policy và Role mới sẽ xuất hiện trong danh sách tương ứng.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/6-verify-dynamic-routing-and-policy-automation/",
	"title": "Xác minh Định tuyến động và Tự động hóa chính sách",
	"tags": [],
	"description": "",
	"content": "Tổng quan về phần Xác minh Phần này dành riêng cho giai đoạn quan trọng nhất: xác minh chức năng của giải pháp SDN. Bạn sẽ thử nghiệm toàn bộ hệ thống, từ thiết lập ban đầu đến cơ chế failover tự động. Mục tiêu chính là xác nhận rằng chính sách bạn đã tự động hóa—chuyển hướng lưu lượng truy cập khi máy chủ bị lỗi—hoạt động đúng như dự kiến. Đầu tiên, bạn sẽ xác thực rằng dịch vụ web chính đang chạy, sau đó mô phỏng một lỗi bằng cách dừng EC2 instance chính. Cuối cùng, bạn sẽ quan sát và xác nhận rằng Elastic IP đã được liên kết lại thành công với máy chủ dự phòng, chứng minh rằng mặt phẳng điều khiển SDN đã thực thi thành công chính sách của nó.\nCác khái niệm chính Định tuyến động (Dynamic Routing): Khả năng của một mạng tự động điều chỉnh các đường dẫn lưu lượng truy cập để phản ứng với những thay đổi trong cấu trúc liên kết hoặc trạng thái mạng, mà không cần can thiệp thủ công. Tự động hóa chính sách (Policy Automation): Việc sử dụng các script hoặc code để tự động thực thi các chính sách mạng được xác định trước, chẳng hạn như quy tắc failover, chính sách bảo mật hoặc định hình lưu lượng truy cập. Kiểm thử Failover (Failover Testing): Quá trình cố ý mô phỏng một lỗi hệ thống để xác minh rằng hệ thống dự phòng hoặc sao lưu tiếp quản thành công và không bị mất dữ liệu. Nội dung: 6.1-Initial-Verification 6.2-Simulate-Web-Primary-Failure 6.3-Verify-Failover-and-Dynamic-Routing "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/7-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Phần cuối cùng này cung cấp hướng dẫn toàn diện để xóa một cách có hệ thống tất cả các tài nguyên AWS đã được triển khai trong bài lab. Tuân thủ các bước này là rất quan trọng để tránh phát sinh các chi phí không cần thiết trong tài khoản AWS của bạn.\nChấm dứt EC2 Instances Mục tiêu: Chấm dứt cả EC2 instance chính và dự phòng, đảm bảo chúng không còn tiêu tốn tài nguyên tính toán. Các bước thực hiện: Truy cập EC2 Dashboard: Điều hướng đến dịch vụ EC2 trong AWS Management Console.\nChọn Instances: Từ danh sách \u0026ldquo;Instances\u0026rdquo;, chọn cả hai EC2 instance Web-Primary và Web-Backup của bạn.\nChấm dứt Instances:\nChọn Instance state. Chọn Terminate instance. Xác nhận hành động khi được hỏi. Giải phóng Elastic IP Mục tiêu: Hủy liên kết (nếu vẫn còn) và giải phóng địa chỉ Elastic IP, làm cho nó khả dụng cho các tài khoản AWS khác và chấm dứt mọi khoản phí tiềm năng.\nCác bước thực hiện:\nTruy cập Elastic IPs: Trong EC2 Dashboard, chọn Elastic IPs từ bảng điều hướng bên trái.\nHủy liên kết EIP (nếu cần): Nếu EIP vẫn còn được liên kết với bất kỳ instance nào, chọn EIP đó, chọn Actions, và sau đó chọn Disassociate Elastic IP address. Xác nhận hành động.\nGiải phóng EIP: Chọn EIP. Chọn Actions, và sau đó chọn Release Elastic IP address. Xác nhận hành động.\nXóa Lambda Function Mục tiêu: Xóa hàm AWS Lambda, vốn là mặt phẳng điều khiển SDN, đảm bảo code và cấu hình của nó bị xóa.\nCác bước thực hiện:\nTruy cập Lambda Service: Điều hướng đến dịch vụ Lambda trong AWS Management Console. Chọn Lambda Function: Chọn SDNEIPFailoverFunction của bạn. Xóa Function: Chọn Actions, và sau đó chọn Delete function. Xác nhận việc xóa. Xóa CloudWatch Alarm Mục tiêu: Xóa alarm CloudWatch đã được cấu hình để giám sát sức khỏe của máy chủ web chính.\nCác bước thực hiện:\nTruy cập CloudWatch Service: Điều hướng đến dịch vụ CloudWatch. Chọn Alarms: Chọn Alarms từ bảng điều hướng bên trái. Xóa Alarm: Chọn alarm Web-Primary-System-Check-Failed. Chọn Actions, và sau đó chọn Delete. Xác nhận việc xóa. Xóa EventBridge Rule Mục tiêu: Xóa EventBridge rule đã liên kết alarm CloudWatch với hàm Lambda.\nCác bước thực hiện:\nTruy cập EventBridge Service: Điều hướng đến dịch vụ EventBridge. Chọn Rules: Chọn Rules từ bảng điều hướng bên trái. Xóa Rule: Chọn SDN-Failover-Rule của bạn. Chọn Actions, và sau đó chọn Delete. Xác nhận việc xóa. Xóa IAM Role và Policy Mục tiêu: Xóa IAM role và policy đã cấp quyền cho hàm Lambda, đảm bảo tất cả các quyền truy cập liên quan đều bị thu hồi. Các bước thực hiện: Truy cập IAM Service: Điều hướng đến dịch vụ IAM.\nXóa IAM Role:\nChọn Roles từ bảng điều hướng bên trái. Chọn SDNLambdaRole. Chọn Delete role. Xác nhận việc xóa. Xóa IAM Policy:\nChọn Policies từ bảng điều hướng bên trái. Chọn SDNLambdaEIPControlPolicy. Chọn Actions, và sau đó chọn Delete. Xác nhận việc xóa. Xóa VPC Mục tiêu: Xóa Virtual Private Cloud, vốn là môi trường mạng nền tảng cho bài lab này. Đây là bước cuối cùng trong việc dọn dẹp tài nguyên.\nCác bước thực hiện:\nTruy cập Your VPCs: Điều hướng đến dịch vụ VPC, sau đó chọn Your VPCs. Xóa VPC: Chọn sdn-project-vpc. Chọn Actions, và sau đó chọn Delete VPC. Xác nhận việc xóa. Lưu ý: Đảm bảo tất cả các tài nguyên liên quan (instances, EIPs, IGWs, subnets, v.v.) đã được xóa hoặc hủy liên kết trước khi cố gắng xóa VPC. AWS sẽ ngăn chặn việc xóa VPC nếu các tài nguyên đang hoạt động vẫn còn bên trong. "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]