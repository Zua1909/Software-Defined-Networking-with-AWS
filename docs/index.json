[
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/5-create-cloudwatch-alarm-and-eventbridge-rule/1-create-cloudwatch-alarm-for-web-primary/",
	"title": "Create CloudWatch Alarm for Web Primary",
	"tags": [],
	"description": "",
	"content": "Objective: To set up an alarm that monitors the system health check status of the Web-Primary EC2 instance and triggers an alert if a failure is detected.\nExecution Steps Access AWS Management Console: Log in to your AWS account.\nNavigate to the CloudWatch service: In the search bar, type \u0026ldquo;CloudWatch\u0026rdquo; and select the CloudWatch service.\nInitiate alarm creation:\nSelect All alarms from the left navigation pane. Click the Create alarm button. Select metric:\nClick Select metric. Select EC2 Metrics -\u0026gt; Per-Instance Metrics.\\ Locate and select the StatusCheckFailed_System metric for your Web-Primary instance. Configure metric and conditions:\nChosen metric: StatusCheckFailed_System (set Statistic to Average, Period to 30 seconds) Conditions: Threshold type: Select Static. Whenever StatusCheckFailed_System is: Select Greater/Equal. than: Enter 1. Additional configuration: Missing data treatment: Select Treat missing data as bad Configure actions:\nClick Next.\nAlarm state trigger: Ensure In ALARM is selected.\nSelect an SNS topic:\nChoose Create new topic. Topic name: Enter SDN_Failover_Notifications Add your email address to receive notifications directly. Click Create topic Configure name and description:\nClick Next. Alarm name: Enter Web-Primary-System-Check-Failed Alarm description: Triggers when Web-Primary instance fails system checks. Click Next Complete alarm creation: Click the Create alarm button.\nCheck your email and confirm subscription\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/4-create-and-configure-lambda-function/1-create-lambda-function/",
	"title": "Create Lambda Function",
	"tags": [],
	"description": "",
	"content": "Objective: To create the AWS Lambda function that will execute the SDN logic, specifically managing the EIP failover.\nExecution Steps Access AWS Management Console: Log in to your AWS account.\nNavigate to the Lambda service: In the search bar, type \u0026ldquo;Lambda\u0026rdquo; and select the Lambda service.\nInitiate function creation:\nSelect Functions from the left navigation pane. Click the Create function button. Configure basic function settings:\nAuthor from scratch: Select this option. Function name: SDNEIPFailoverFunction Runtime: Select Python 3.9 Architecture: Select x86_64 Permissions: Under \u0026ldquo;Change default execution role\u0026rdquo;, select Use an existing role. Choose the SDNLambdaRole previously created from the dropdown list. Complete function creation: Click the Create function button.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/1-create-vpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Objective: To establish an isolated and secure virtual network environment within AWS, which will house all project resources.\nExecution Steps Access AWS Management Console: Log in to your AWS account.\nNavigate to the VPC service: In the search bar, type \u0026ldquo;VPC\u0026rdquo; and select the VPC service.\nInitiate VPC creation:\nSelect Your VPCs from the left navigation pane. Click the Create VPC button. Configure VPC parameters:\nName tag: Type sdn-project-vpc IPv4 CIDR block: Type 10.0.0.0/16 Tenancy: Maintain the default setting of Default. Complete VPC creation: Click the Create VPC button.\nConfirm and record: A success message confirming VPC creation will be displayed. Record the VPC ID for subsequent configurations.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/6-verify-dynamic-routing-and-policy-automation/1-initial-verification/",
	"title": "Initial Verification",
	"tags": [],
	"description": "",
	"content": "Objective: To verify that the web service is initially accessible via the Elastic IP and is correctly serving content from the primary web server.\nExecution Steps Retrieve Elastic IP Address: Obtain the Elastic IP address recorded during Section 3.3.\nAccess Web Service: Open a web browser.\nNavigate to EIP: Enter the Elastic IP address with port 80 into the browser\u0026rsquo;s address bar and press Enter.\nConfirm Primary Server Response: The browser should display content indicating \u0026ldquo;Hello from Web-Primary!\u0026rdquo;, confirming the primary server is operational and reachable through the EIP.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview of the Lab: Software-Defined Networking with AWS This lab guides you through implementing fundamental Software-Defined Networking (SDN) concepts within an Amazon Web Services (AWS) environment. You will gain practical experience with programmatic network control, dynamic routing, and policy automation. The core of this project is to build a robust, automated failover mechanism for web servers using AWS services. By the end of this lab, you will understand how a centralized control plane (AWS Lambda, CloudWatch) can dynamically manage a distributed data plane (EC2, VPC, EIP) to ensure high availability and network resilience.\nArchitecture Diagram The diagram above illustrates the architecture we will implement:\nData Plane (VPC, Subnets, EC2 Instances): The foundational network infrastructure where all your resources reside. It includes two EC2 instances (Web-Primary and Web-Backup) in separate public subnets for high availability. Internet Gateway \u0026amp; Elastic IP: The Internet Gateway provides internet connectivity to your VPC, while a single Elastic IP acts as a static, public access point for your web service. Control Plane (CloudWatch, EventBridge, Lambda): This is the automated brain of the SDN solution. CloudWatch Alarm actively monitors the health of the Web-Primary instance. EventBridge Rule listens for an ALARM state change from CloudWatch. Lambda Function is triggered by EventBridge and executes a pre-defined policy: re-associating the Elastic IP from the failed Web-Primary to the healthy Web-Backup. Lab Breakdown: What You Will Do? Part 2: Preparation: Set up the foundational AWS network infrastructure and IAM permissions. Part 3: Deploy Web Servers: Launch the primary and backup EC2 instances and configure an Elastic IP. Part 4: Create and configure Lambda Function: Build the serverless control plane logic for failover. Part 5: Create Monitoring and Trigger: Establish the event-driven mechanism using CloudWatch and EventBridge. Part 6: Verify Dynamic Routing: Test the automated failover process by simulating a primary server failure. Part 7: Clean up Resources: Systematically remove all created AWS resources to avoid future costs. Contents: Part 2: Preparation Part 3: Deploy Web Servers Part 4: Create and configure Lambda Function Part 5: Create Monitoring and Trigger Part 6: Verify Dynamic Routing Part 7: Clean up Resources "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/3-deploy-web-servers/1-launch-web-primary-ec2/",
	"title": "Launch Web Primary EC2",
	"tags": [],
	"description": "",
	"content": "Objective: To deploy the EC2 instance that will initially host the primary web service.\nExecution Steps Access EC2 Dashboard: Navigate to the EC2 service in the AWS Management Console.\nInitiate instance launch: Select Instances from the left navigation pane, then click Launch instances.\nName and tags:\nName: Web-Primary Choose Amazon Machine Image (AMI): Select \u0026ldquo;Amazon Linux 2023 AMI\u0026rdquo;\nSelect Instance Type: Choose t2.micro or t3.micro (eligible for the AWS Free Tier).\nCreate a Key Pair\nClick Create new key pair Key pair name: sdn-key Key pair type: Select RSA Private key file format: Select .pem Click Create key pair Important: This file will be downloaded only once. Store it safely Configure Instance Details:\nNetwork: Select sdn-project-vpc Subnet: Select sdn-public-subnet-1a Auto-assign Public IP: Ensure Enable is selected Configure Security Group:\nSelect an existing security group. Choose the web-server-sg created previously. Configure User Data\nExpand Advanced Details and locate User data. Paste the following script to install Nginx for a simple web server:\n#!/bin/bash sudo dnf update -y sudo dnf install nginx -y sudo systemctl start nginx sudo systemctl enable nginx echo \u0026#34;\u0026lt;h1\u0026gt;Hello from Web-Primary!\u0026lt;/h1\u0026gt;\u0026#34; | sudo tee /usr/share/nginx/html/index.html Launch Instance: Click Launch instance.\nConfirm and record: Record the Instance ID of the Web-Primary instance upon successful launch.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/",
	"title": "Software-Defined Networking with AWS",
	"tags": [],
	"description": "",
	"content": "Software-Defined Networking with AWS Overview This lab is a hands-on guide to implementing Software-Defined Networking (SDN) concepts on Amazon Web Services (AWS). You will build a complete, event-driven network automation solution that demonstrates programmatic control, dynamic routing, and policy-based network management. The project focuses on creating a high-availability web service with an automated failover mechanism using AWS Lambda, CloudWatch, and EventBridge to manage an Elastic IP address. This will provide you with a practical understanding of how to build resilient and self-healing network architectures in the cloud.\nContents 1. Introduction 2. Preparation 3. Deploy Web Servers 4. Create and configure Lambda Function 5. Create Monitoring and Trigger 6. Verify Dynamic Routing 7. Clean up Resources "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/4-create-and-configure-lambda-function/2-configure-lambda-environment-variables/",
	"title": "Configure Lambda Environment Variables",
	"tags": [],
	"description": "",
	"content": "Objective: To provide the Lambda function with essential information, including the Elastic IP Allocation ID and the Instance IDs of both the primary and backup web servers, enabling it to perform its failover operations.\nExecution Steps Access Lambda function configuration: After the SDNEIPFailoverFunction is created, select the Configuration tab.\nEdit environment variables:\nSelect Environment variables from the left-hand menu. Click the Edit button. Add required variables:\nClick Add environment variable. Key: EIP_ALLOCATION_ID Value: Enter the Allocation ID of the Elastic IP recorded in Section 3.3. Click Add environment variable. Key: WEB_BACKUP_INSTANCE_ID Value: Enter the Instance ID of the Web-Backup EC2 instance recorded in Section 3.2. Click Add environment variable. Key: WEB_PRIMARY_INSTANCE_ID Value: Enter the Instance ID of the Web-Primary EC2 instance recorded in Section 3.1. Save changes: Click the Save button.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/5-create-cloudwatch-alarm-and-eventbridge-rule/2-create-eventbridge-rule-to-trigger-lambda/",
	"title": "Create EventBridge Rule to Trigger Lambda",
	"tags": [],
	"description": "",
	"content": "Objective: To link the Web-Primary-System-Check-Failed CloudWatch Alarm to the SDNEIPFailoverFunction Lambda function, ensuring the failover logic is automatically executed upon alarm activation.\nExecution Steps Access AWS Management Console: Log in to your AWS account.\nNavigate to the EventBridge service: In the search bar, type \u0026ldquo;EventBridge\u0026rdquo; and select the EventBridge service.\nInitiate rule creation:\nSelect Rules from the left navigation pane. Click the Create rule button. Configure rule details:\nName: SDN-Failover-Rule Description: Triggers Lambda function on Web-Primary alarm. Event bus: Select default. Rule type: Choose Rule with an event pattern. Click Next. Configure event pattern:\nCreation method: Select Custom pattern (JSON editor)\nEdit the Event pattern JSON: In the \u0026ldquo;Event pattern\u0026rdquo; text area, insert JSON text below:\n{ \u0026#34;source\u0026#34;: [\u0026#34;aws.cloudwatch\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;CloudWatch Alarm State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;alarmName\u0026#34;: [\u0026#34;Web-Primary-System-Check-Failed\u0026#34;], \u0026#34;state\u0026#34;: { \u0026#34;value\u0026#34;: [\u0026#34;ALARM\u0026#34;] } } } Click Next.\nConfigure target:\nTarget types: Select AWS service Select a target: Choose Lambda function Function: Select SDNEIPFailoverFunction (your Lambda function). Click Next. Review and create:\nReview the rule configuration. Click Create rule. Confirm: The new SDN-Failover-Rule will appear in the EventBridge Rules list, indicating it is now configured to trigger your Lambda function based on the CloudWatch alarm.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/2-create-subnets/",
	"title": "Create Subnets",
	"tags": [],
	"description": "",
	"content": "Objective: To partition the VPC\u0026rsquo;s IP address space into smaller segments (Subnets) for organized resource placement and enhanced traffic control. Two public Subnets will be created in distinct Availability Zones (AZs) to improve high availability.\nExecution Steps Navigate to Subnets: From the VPC Dashboard, select Subnets in the left navigation pane.\nInitiate Subnet creation: Click the Create subnet button.\nConfigure the first Subnet (Public Subnet 1):\nVPC ID: Select sdn-project-vpc\nSubnet name: Type sdn-public-subnet-1a\nAvailability Zone: Select us-east-1a\nIPv4 CIDR block: Type 10.0.1.0/24\nComplete Subnet 1 creation: Click the Create subnet button.\nConfigure the second Subnet (Public Subnet 2): Repeat steps 3 and 4 for a second Subnet:\nVPC ID: Select sdn-project-vpc\nSubnet name: Type sdn-public-subnet-1b\nAvailability Zone: Select us-east-1b\nIPv4 CIDR block: Type 10.0.2.0/24\nComplete Subnet 2 creation: Click the Create subnet button.\nEnable automatic public IP assignment for Public Subnets:\nSelect sdn-public-subnet-1a.\nChoose Actions -\u0026gt; Modify auto-assign IP settings.\nSelect the Enable auto-assign public IPv4 address checkbox.\nClick Save.\nPerform the same steps for sdn-public-subnet-1b\nConfirm and record: The two new Subnets will appear in the list. Record the Subnet IDs for both Subnets.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/3-deploy-web-servers/2-launch-web-backup-ec2/",
	"title": "Launch Web Backup EC2",
	"tags": [],
	"description": "",
	"content": "Objective: To deploy the EC2 instance that will serve as the backup web service, ready for failover.\nExecution Steps Access EC2 Dashboard: Navigate to the EC2 service.\nInitiate instance launch: Select Instances, then click Launch instances.\nName and tags\nName: Web-Backup Choose Amazon Machine Image (AMI): Select the same AMI as used for the primary instance.\nSelect Instance Type: Choose t2.micro or t3.micro\nSelect Key Pair: Choose the same key pair as used for the primary instance.\nConfigure Instance Details:\nNetwork: Select sdn-project-vpc. Subnet: Select sdn-public-subnet-1b (deploying in a different AZ enhances resilience). Auto-assign Public IP: Ensure Enable is selected. Configure Security Group:\nSelect an existing security group. Choose the web-server-sg. Configure User Data\nExpand Advanced Details and locate User data. Paste the following script:\n#!/bin/bash sudo dnf update -y sudo dnf install nginx -y sudo systemctl start nginx sudo systemctl enable nginx echo \u0026#34;\u0026lt;h1\u0026gt;Hello from Web-Backup!\u0026lt;/h1\u0026gt;\u0026#34; | sudo tee /usr/share/nginx/html/index.html Launch Instance: Click Launch instance.\nConfirm and record: Record the Instance ID of the Web-Backup instance upon successful launch.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Overview of the Preparation Section This part of the lab focuses on setting up the foundational AWS infrastructure required for the Software-Defined Networking (SDN) project. You will deploy and configure the core networking components that will form the Data Plane of our SDN architecture. This includes creating a secure and isolated network environment (VPC), defining network segments (Subnets), and establishing connectivity (Internet Gateway, Route Tables) and security rules (Security Groups). Additionally, you will create the necessary IAM Policies and Roles to grant programmatic permissions to our future control plane component, the AWS Lambda function.\nKey Concepts Amazon VPC (Virtual Private Cloud): A logically isolated virtual network where you can launch AWS resources. Subnet: A range of IP addresses in your VPC. Resources in a public subnet can communicate with the internet, while those in a private subnet cannot. Internet Gateway (IGW): A horizontally scaled, redundant, and highly available VPC component that allows communication between your VPC and the internet. Route Table: A set of rules, called routes, that determines where network traffic from your subnets is directed. Security Group: A virtual firewall that controls inbound and outbound traffic for EC2 instances. IAM (Identity and Access Management): A service that enables you to manage access to AWS services and resources securely. IAM Policies define permissions, and IAM Roles grant those permissions to AWS services or users. Contents: 2.1-Create-VPC 2.2-Create-Subnets 2.3-Create-Internet-Gateway 2.4-Create-Route-Table 2.5-Create-Security-Groups 2.6-Create-IAM-Policy-and-IAM-Role "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/6-verify-dynamic-routing-and-policy-automation/2-simulate-web-primary-failure/",
	"title": "Simulate Web Primary Failure",
	"tags": [],
	"description": "",
	"content": "Objective: To deliberately induce a failure on the Web-Primary EC2 instance, thereby triggering the CloudWatch Alarm and subsequently the SDN-driven failover process.\nExecution Steps Access EC2 Dashboard: Navigate to the EC2 service in the AWS Management Console.\nSelect Primary Instance: From the \u0026ldquo;Instances\u0026rdquo; list, select your Web-Primary EC2 instance.\nStop the Instance:\nChoose Instance state. Select Stop instance. Confirm the action when prompted. Monitor Alarm State: Allow several minutes for CloudWatch to detect the instance state change. Monitor the Web-Primary-System-Check-Failed alarm in the CloudWatch Alarms dashboard. The alarm state is expected to transition from OK to INSUFFICIENT_DATA and then to ALARM.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/3-deploy-web-servers/3-allocate-elastic-ip-and-associate/",
	"title": "Allocate Elastic IP and Associate",
	"tags": [],
	"description": "",
	"content": "Objective: To provision a static public IP address (Elastic IP) that will act as the stable entry point for client requests, and initially associate it with the primary web server.\nExecution Steps Access Elastic IPs: In the EC2 Dashboard, select Elastic IPs from the left navigation pane, under \u0026ldquo;Network \u0026amp; Security\u0026rdquo;.\nAllocate Elastic IP address: Click the Allocate Elastic IP address button.\nConfirm allocation: Click Allocate. Record the Allocation ID of the newly allocated EIP.\nAssociate Elastic IP with primary instance:\nSelect the newly allocated EIP. Choose Actions -\u0026gt; Associate Elastic IP address. Resource type: Select Instance. Instance: Select your Web-Primary instance (using its Instance ID). Reassociation: Check Allow this Elastic IP address to be reassociated Click Associate. Confirm and record: The Elastic IP is now associated with your primary web server. Record the Elastic IP address itself. This IP address will be used to test the web service.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/3-create-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "Objective: To enable resources within the Public Subnet of your VPC to communicate with the Internet.\nExecution Steps Access Internet Gateways: In the VPC Dashboard, select Internet Gateways from the left navigation pane.\nInitiate Internet Gateway creation: Click the Create internet gateway button.\nConfigure Internet Gateway:\nName tag: Type sdn-project-igw Complete Internet Gateway creation: Click the Create internet gateway button.\nAttach Internet Gateway to VPC:\nOnce the IGW is created (it will be in a Detached state), select the newly created IGW.\nChoose Actions -\u0026gt; Attach to VPC.\nSelect sdn-project-vpc from the dropdown list.\nClick the Attach internet gateway button.\nConfirm attachment: The State of the Internet Gateway will transition to Attached.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/3-deploy-web-servers/",
	"title": "Deploy Web Servers",
	"tags": [],
	"description": "",
	"content": "Overview of the Web Servers Deployment Section This part of the lab focuses on deploying the core components of our web service that will form the Data Plane of our SDN solution. You will launch two EC2 instances: one to act as the primary web server and the other as a backup. To provide a stable and consistent entry point for client traffic, you will also allocate an Elastic IP (EIP) and associate it with the primary server. This EIP is the resource that our SDN control plane will programmatically manage to achieve dynamic routing and failover.\nKey Concepts Amazon EC2 (Elastic Compute Cloud): A web service that provides secure, resizable compute capacity in the cloud. It is the core service for running virtual servers, or instances. EC2 User Data: A script that you can provide to an EC2 instance to perform automated tasks on its first boot, such as installing a web server or configuring software. Elastic IP (EIP): A static, public IPv4 address designed for dynamic cloud computing. An EIP can be associated with any EC2 instance in your account, and our control plane will use this capability to redirect traffic during a failover. Failover: The process of switching to a redundant or standby computer server, system, or network upon the failure or abnormal termination of the previously active application, server, or system. Contents: 3.1-Launch-Web-Primary-EC2 3.2-Launch-Web-Backup-EC2 3.3-Allocate-Elastic-IP-and-Associate "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/4-create-and-configure-lambda-function/3-upload-lambda-code/",
	"title": "Upload Lambda Code",
	"tags": [],
	"description": "",
	"content": "Objective: To provide the executable Python code to the Lambda function, which defines the logic for detecting primary server failure and orchestrating the Elastic IP reassignment to the backup server.\nExecution Steps Access Lambda function code editor: In the configuration of your SDNEIPFailoverFunction, select the Code tab.\nReplace default code: Remove any default code present in the lambda_function.py editor window.\nPaste provided code: Insert the following Python code into the lambda_function.py editor:\nimport boto3 import os import json # Import json library to parse JSON strings # Initialize the EC2 client ec2_client = boto3.client(\u0026#39;ec2\u0026#39;) # Retrieve Environment Variables for EIP and Instance IDs EIP_ALLOCATION_ID = os.environ.get(\u0026#39;EIP_ALLOCATION_ID\u0026#39;) WEB_BACKUP_INSTANCE_ID = os.environ.get(\u0026#39;WEB_BACKUP_INSTANCE_ID\u0026#39;) WEB_PRIMARY_INSTANCE_ID = os.environ.get(\u0026#39;WEB_PRIMARY_INSTANCE_ID\u0026#39;) def lambda_handler(event, context): print(\u0026#34;--- Full Event Received ---\u0026#34;) print(event) # Print the entire event object to logs for debugging its structure print(\u0026#34;-------------------------\u0026#34;) instance_id_in_alarm = None state_value = None # Safely extract the alarm state value if \u0026#39;detail\u0026#39; in event and \u0026#39;state\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;value\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;]: state_value = event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;value\u0026#39;] # --- Start of robust InstanceId extraction --- # Try to find InstanceId from \u0026#39;configuration.metrics\u0026#39; directly try: if \u0026#39;detail\u0026#39; in event and \u0026#39;configuration\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;metrics\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;configuration\u0026#39;]: for metric_config in event[\u0026#39;detail\u0026#39;][\u0026#39;configuration\u0026#39;][\u0026#39;metrics\u0026#39;]: if \u0026#39;metricStat\u0026#39; in metric_config and \u0026#39;metric\u0026#39; in metric_config[\u0026#39;metricStat\u0026#39;] and \u0026#39;dimensions\u0026#39; in metric_config[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;]: dimensions_dict = metric_config[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;][\u0026#39;dimensions\u0026#39;] if isinstance(dimensions_dict, dict) and \u0026#39;InstanceId\u0026#39; in dimensions_dict: instance_id_in_alarm = dimensions_dict[\u0026#39;InstanceId\u0026#39;] break # Found, exit this loop except Exception as e: print(f\u0026#34;Error parsing Instance ID from configuration.metrics: {e}\u0026#34;) # Fallback: If InstanceId not found, try parsing \u0026#39;reasonData\u0026#39;. if not instance_id_in_alarm and \u0026#39;detail\u0026#39; in event and \u0026#39;state\u0026#39; in event[\u0026#39;detail\u0026#39;] and \u0026#39;reasonData\u0026#39; in event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;]: try: reason_data_str = event[\u0026#39;detail\u0026#39;][\u0026#39;state\u0026#39;][\u0026#39;reasonData\u0026#39;] reason_data_json = json.loads(reason_data_str) if \u0026#39;metrics\u0026#39; in reason_data_json and len(reason_data_json[\u0026#39;metrics\u0026#39;]) \u0026gt; 0: first_metric = reason_data_json[\u0026#39;metrics\u0026#39;][0] if \u0026#39;metricStat\u0026#39; in first_metric and \u0026#39;metric\u0026#39; in first_metric[\u0026#39;metricStat\u0026#39;] and \u0026#39;dimensions\u0026#39; in first_metric[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;]: dimensions_dict_reason = first_metric[\u0026#39;metricStat\u0026#39;][\u0026#39;metric\u0026#39;][\u0026#39;dimensions\u0026#39;] if isinstance(dimensions_dict_reason, dict) and \u0026#39;InstanceId\u0026#39; in dimensions_dict_reason: instance_id_in_alarm = dimensions_dict_reason[\u0026#39;InstanceId\u0026#39;] except Exception as e: print(f\u0026#34;Error parsing Instance ID from reasonData: {e}\u0026#34;) # --- End of robust InstanceId extraction --- # If InstanceId was still not found after all attempts, log and exit if not instance_id_in_alarm: print(\u0026#34;Could not find \u0026#39;InstanceId\u0026#39; in alarm details after all parsing attempts. Exiting.\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 400, \u0026#39;body\u0026#39;: \u0026#39;InstanceId not found in alarm event.\u0026#39; } # Check if the alarm is for the primary web server and is in ALARM state if instance_id_in_alarm == WEB_PRIMARY_INSTANCE_ID and state_value == \u0026#39;ALARM\u0026#39;: print(f\u0026#34;Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) is in ALARM state. Initiating failover.\u0026#34;) try: # Describe the EIP to check its current association response = ec2_client.describe_addresses( AllocationIds=[EIP_ALLOCATION_ID] ) current_association_id = None current_associated_instance_id = None if response[\u0026#39;Addresses\u0026#39;] and \u0026#39;AssociationId\u0026#39; in response[\u0026#39;Addresses\u0026#39;][0]: current_association_id = response[\u0026#39;Addresses\u0026#39;][0][\u0026#39;AssociationId\u0026#39;] print(f\u0026#34;Current EIP association ID: {current_association_id}\u0026#34;) if \u0026#39;InstanceId\u0026#39; in response[\u0026#39;Addresses\u0026#39;][0]: current_associated_instance_id = response[\u0026#39;Addresses\u0026#39;][0][\u0026#39;InstanceId\u0026#39;] print(f\u0026#34;EIP is currently associated with instance: {current_associated_instance_id}\u0026#34;) # If EIP is associated with Web-Primary, disassociate it if current_associated_instance_id == WEB_PRIMARY_INSTANCE_ID: print(f\u0026#34;EIP is currently associated with Web-Primary. Disassociating...\u0026#34;) ec2_client.disassociate_address(AssociationId=current_association_id) print(\u0026#34;Disassociated EIP.\u0026#34;) else: print(f\u0026#34;EIP is not currently associated with Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) or not associated. Current: {current_associated_instance_id}. Proceeding to associate with backup.\u0026#34;) # Associate the EIP with Web-Backup ec2_client.associate_address( InstanceId=WEB_BACKUP_INSTANCE_ID, AllocationId=EIP_ALLOCATION_ID ) print(f\u0026#34;EIP {EIP_ALLOCATION_ID} successfully associated with Web-Backup ({WEB_BACKUP_INSTANCE_ID}).\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Failover completed successfully.\u0026#39; } except Exception as e: print(f\u0026#34;Error during failover: {e}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: f\u0026#39;Failover failed: {e}\u0026#39; } else: # Log if the alarm is not for the primary instance or not in ALARM state print(f\u0026#34;Alarm not for Web-Primary ({WEB_PRIMARY_INSTANCE_ID}) or not in ALARM state ({state_value}). No action taken.\u0026#34;) print(f\u0026#34;Instance ID from alarm: {instance_id_in_alarm}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;No relevant action performed.\u0026#39; } Deploy code: Click the Deploy button to save and deploy the changes to your Lambda function.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/6-verify-dynamic-routing-and-policy-automation/3-verify-failover-and-dynamic-routing/",
	"title": "Verify Failover and Dynamic Routing",
	"tags": [],
	"description": "",
	"content": "Objective: To confirm that the Elastic IP has been successfully disassociated from the failed primary server and reassociated with the backup server, indicating successful dynamic routing and policy automation.\nExecution Steps Verify Elastic IP Association:\nNavigate back to the EC2 service. Select Elastic IPs from the left navigation pane. Examine the details of your Elastic IP. Confirm that its association has changed and it is now linked to the Web-Backup EC2 instance. Access Web Service via EIP (Second Attempt)\nReload your web browser Confirm Backup Server Response: The browser should now display content indicating \u0026ldquo;Hello from Web-Backup!\u0026rdquo;. This conclusively demonstrates that the traffic has been dynamically rerouted to the healthy backup server by the SDN control plane. "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/4-create-and-configure-lambda-function/",
	"title": "Create and configure Lambda Function",
	"tags": [],
	"description": "",
	"content": "Overview of the Lambda Function Section This part of the lab is dedicated to building the Control Plane of our Software-Defined Networking (SDN) solution. You will create and configure a serverless AWS Lambda function that will act as the core logic for our dynamic routing policy. The function will be equipped with the necessary permissions (via an IAM Role) and environment variables (for EIP and instance IDs) to interact with the EC2 API. The primary role of this function is to programmatically manage the association of the Elastic IP, ensuring that in the event of a primary server failure, traffic is seamlessly redirected to the backup server.\nKey Concepts AWS Lambda: A serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. It is the ideal tool for building the control plane of our SDN, as it can be triggered by network events. Serverless Computing: A cloud computing execution model where the cloud provider manages the server, allowing developers to focus solely on their code. Programmatic Network Control: The ability to manage and configure network resources (like EIPs and routing) using code and APIs, rather than manual configuration. This is a core principle of SDN. Environment Variables: Key-value pairs that you can store in your Lambda function\u0026rsquo;s configuration to dynamically pass settings, such as resource IDs, without changing the code itself. Contents: 4.1-Create-Lambda-Function 4.2-Configure-Lambda-Environment-Variables 4.3-Upload-Lambda-Code "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/4-create-route-table/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "Objective: To define how network packets are routed within and outside your Subnets. A Route Table will be configured to direct Internet-bound traffic through the Internet Gateway.\nExecution Steps Access Route Tables: In the VPC Dashboard, select Route Tables from the left navigation pane.\nIdentify the target Route Table: A default Route Table is automatically generated and associated with the VPC upon creation. This Route Table will be utilized. Locate the Route Table with a VPC ID matching sdn-project-vpc and a Main column value of Yes.\nAdd default Internet route:\nSelect the identified Route Table.\nChoose the Routes tab.\nClick the Edit routes button.\nClick Add route.\nDestination: Enter 0.0.0.0/0 (representing all IPv4 Internet traffic).\nTarget: Select Internet Gateway from the dropdown, then choose sdn-project-igw (your created IGW).\nClick the Save changes button.\nAssociate Subnets with the Route Table:\nSelect the Subnet associations tab.\nClick the Edit subnet associations button.\nSelect both Subnets: sdn-public-subnet-1a and sdn-public-subnet-1b.\nClick the Save associations button.\nConfirm association: Verify that both public Subnets are now associated with the Route Table configured for Internet access.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/5-create-cloudwatch-alarm-and-eventbridge-rule/",
	"title": "Create CloudWatch Alarm and EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "Overview of the CloudWatch Alarm and EventBridge Rule Section This part of the lab is the final step in connecting our SDN control and data planes. You will establish the event-driven mechanism that initiates the failover process. This involves creating a CloudWatch Alarm to actively monitor the health of the primary web server. If this alarm is triggered (e.g., due to a system check failure), it will emit an event. You will then use Amazon EventBridge to capture this specific event and, in turn, trigger our AWS Lambda function. This completes the SDN loop: a change in the network state (server failure) is detected, which triggers our control plane logic (Lambda), which then executes a change in the network configuration (EIP re-association).\nKey Concepts Amazon CloudWatch: A monitoring and management service that provides data and actionable insights for AWS, hybrid, and on-premises applications and infrastructure resources. It collects monitoring and operational data in the form of logs, metrics, and events. CloudWatch Alarm: An alarm that watches a single metric or the result of a math expression based on a metric. The alarm performs one or more actions based on the value of the metric relative to a threshold over a number of time periods. Amazon EventBridge: A serverless event bus that makes it easy to connect applications using data from your own applications, integrated Software-as-a-Service (SaaS) applications, and AWS services. EventBridge rules match incoming events and route them to targets like a Lambda function. Event-Driven Architecture: A software design pattern where decoupled applications and services communicate through events. In this lab, the CloudWatch event is the trigger for our Lambda function. Contents: 5.1-Create-CloudWatch-Alarm-for-Web-Primary 5.2-Create-EventBridge-Rule-to-Trigger-Lambda "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/5-create-security-groups/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "Objective: To deploy a Security Group that governs inbound and outbound network traffic for your EC2 Instances (web servers), permitting only essential communication ports (HTTP, HTTPS, SSH).\nExecution Steps Navigate to Security Groups:\nWithin the AWS Management Console, access the EC2 service. In the left navigation pane, under \u0026ldquo;Network \u0026amp; Security\u0026rdquo;, select Security Groups. Initiate Security Group creation: Click the Create security group button.\nConfigure basic information:\nSecurity group name: web-server-sg Description: Allows HTTP/HTTPS and SSH traffic to web servers VPC: Select sdn-project-vpc Configure Inbound rules (Incoming Traffic):\nClick Add rule.\nType: HTTP (Port: 80) Source: Anywhere-IPv4 (0.0.0.0/0) Click Add rule.\nType: HTTPS (Port: 443) Source: Anywhere-IPv4 (0.0.0.0/0). Click Add rule.\nType: SSH (Port: 22) Source: Select My IP to automatically populate your current public IP address. Opening SSH access from 0.0.0.0/0 is not recommended from a security perspective. Configure Outbound rules (Outgoing Traffic): Retain the default setting of All traffic to 0.0.0.0/0; this is sufficient for the scope of this lab.\nComplete Security Group creation: Click the Create security group button.\nConfirm: The new web-server-sg Security Group will appear in the list.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/2-preparation/6-create-iam-policy-and-iam-role/",
	"title": "Create IAM Policy and IAM Role",
	"tags": [],
	"description": "",
	"content": "Objective: To define and assign the necessary permissions for AWS Lambda (our control plane) to execute actions such as reading EC2 Instance information, managing Elastic IPs (associating/disassociating), and writing logs to CloudWatch Logs.\nExecution Steps Navigate to the IAM service: In the AWS Console search bar, type \u0026ldquo;IAM\u0026rdquo; and select the IAM service.\nCreate IAM Policy (Permissions Policy):\nIn the left navigation pane, select Policies.\nClick the Create policy button.\nSelect the JSON tab.\nRemove the default content and paste the following JSON policy:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeInstances\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DescribeAddresses\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:*:*:*\u0026#34; } ] } Click Next Name: SDNLambdaEIPControlPolicy Description: Allows Lambda to control EC2 EIP associations and write logs. Click the Create policy button. Create IAM Role:\nIn the left navigation pane, select Roles. Click the Create role button. Select trusted entity: Choose AWS service. Use case: Select Lambda. Click Next. Add permissions: In the search field, type the name of the Policy just created (SDNLambdaEIPControlPolicy) and select it. Click Next. Name, review, and create:\nRole name: SDNLambdaRole Description: Role for Lambda function to manage EIP for SDN failover. Click the Create role button.\nConfirm: The new Policy and Role will appear in their respective lists.\n"
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/6-verify-dynamic-routing-and-policy-automation/",
	"title": "Verify Dynamic Routing and Policy Automation",
	"tags": [],
	"description": "",
	"content": "Overview of the Verification Section This section is dedicated to the critical phase of verifying the functionality of our SDN solution. You will put the entire system to the test, from the initial setup to the automated failover mechanism. The primary objective is to confirm that the policy you\u0026rsquo;ve automated—to re-route traffic upon a server failure—works as intended. You will first validate that the primary web service is running, then simulate a failure by stopping the primary EC2 instance. Finally, you will observe and confirm that the Elastic IP has been successfully re-associated with the backup server, proving that our SDN control plane has successfully executed its policy.\nKey Concepts Dynamic Routing: The ability of a network to automatically adjust its traffic paths in response to changes in the network topology or state, without manual intervention. Policy Automation: The use of scripts or code to automatically enforce predefined network policies, such as failover rules, security policies, or traffic shaping. Failover Testing: The process of intentionally simulating a system failure to verify that the redundant or backup system takes over successfully and without data loss. Contents: 6.1-Initial-Verification 6.2-Simulate-Web-Primary-Failure 6.3-Verify-Failover-and-Dynamic-Routing "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/7-clean-up-resources/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "This final section provides a comprehensive guide for systematically removing all AWS resources deployed during this lab. Adhering to these steps is critical to avoid incurring unnecessary ongoing charges in your AWS account.\nTerminate EC2 Instances Objective: To terminate both the primary and backup EC2 instances, ensuring they no longer consume compute resources. Execution Steps: Access EC2 Dashboard: Navigate to the EC2 service in the AWS Management Console.\nSelect Instances: From the \u0026ldquo;Instances\u0026rdquo; list, select both your Web-Primary and Web-Backup EC2 instances.\nTerminate Instances:\nChoose Instance state. Select Terminate instance. Confirm the action when prompted. Release Elastic IP Objective: To disassociate (if still associated) and release the Elastic IP address, making it available for other AWS accounts and ceasing any potential charges.\nExecution Steps:\nAccess Elastic IPs: In the EC2 Dashboard, select Elastic IPs from the left navigation pane.\nDisassociate EIP (if needed): If the EIP is still associated with any instance, select the EIP, choose Actions, and then Disassociate Elastic IP address. Confirm the action.\nRelease EIP: Select the EIP. Choose Actions, and then Release Elastic IP address. Confirm the action.\nDelete Lambda Function Objective: To delete the AWS Lambda function, which served as the SDN control plane, ensuring its code and configuration are removed.\nExecution Steps:\nAccess Lambda Service: Navigate to the Lambda service in the AWS Management Console. Select Lambda Function: Select your SDNEIPFailoverFunction. Delete Function: Choose Actions, and then Delete function. Confirm the deletion. Delete CloudWatch Alarm Objective: To remove the CloudWatch alarm configured to monitor the primary web server\u0026rsquo;s health.\nExecution Steps:\nAccess CloudWatch Service: Navigate to the CloudWatch service. Select Alarms: Select Alarms from the left navigation pane. Delete Alarm: Select the Web-Primary-System-Check-Failed alarm. Choose Actions, and then Delete. Confirm the deletion. Delete EventBridge Rule Objective: To remove the EventBridge rule that linked the CloudWatch alarm to the Lambda function.\nExecution Steps:\nAccess EventBridge Service: Navigate to the EventBridge service. Select Rules: Select Rules from the left navigation pane. Delete Rule: Select your SDN-Failover-Rule. Choose Actions, and then Delete. Confirm the deletion. Delete IAM Role and Policy Objective: To remove the IAM role and policy that granted permissions to the Lambda function, ensuring all associated access rights are revoked. Execution Steps: Access IAM Service: Navigate to the IAM service.\nDelete IAM Role:\nSelect Roles from the left navigation pane. Select SDNLambdaRole. Choose Delete role. Confirm the deletion. Delete IAM Policy:\nSelect Policies from the left navigation pane. Select SDNLambdaEIPControlPolicy. Choose Actions, and then Delete. Confirm the deletion. Delete VPC Objective: To delete the Virtual Private Cloud, which is the foundational network environment for this lab. This is the final step in resource cleanup.\nExecution Steps:\nAccess Your VPCs: Navigate to the VPC service, then select Your VPCs. Delete VPC: Select sdn-project-vpc. Choose Actions, and then Delete VPC. Confirm the deletion. Note: Ensure all associated resources (instances, EIPs, IGWs, subnets, etc.) are deleted or detached before attempting to delete the VPC. AWS will generally prevent VPC deletion if active resources remain within it. "
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://Zua1909.github.io/Software-Defined-Networking-with-AWS/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]